a[, c(2, 5)]
a
help("matrix")
=5, byrow = TRUE)
a <- matrix(1:10, nrow=2, ncol=5, byrow = TRUE)
a <- matrix(1:10, nrow=2, ncol=5, byrow = TRUE)
print(a)
a <- matrix(1:10, nrow=2, ncol=5, byrow = FALSE)
a <- 1:20
dim(a) <- c(4, 5) # change the vector of length 20 to a matrix of 4 by 5
a <- 1:20
dim(a) <- c(4, 5) # change the vector of length 20 to a matrix of 4 by 5
print(a)
a <- 1:20
print(a)
dim(a) <- c(4, 5) # change the vector of length 20 to a matrix of 4 by 5
print(a)
# naming matrix dimensions. the name must be a list
mynames <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
mynames
dimnames(a) <- mynames
a <- matrix(1:10, nrow=2, ncol=5, byrow = FALSE)
print(a)
a[,3]
a[1, 2:3]
a[, 2:4]
a[, c(2, 5)]
mynames <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
dimnames(a) <- mynames
a
# using vector()
x <- vector(mode="numeric", length=10L)
c <- "single quote ' in between double quotes"
print(c)
d <- 'Double quotes " in between single quote'
a <-c(1, 2, 0, "1")
print(d)
# creating a matrix from vectors
a <-c(1:4)
b <-c(31:36)
c <-cbind(a, b)
# creating a matrix from vectors
a <-c(1:6)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
print(c)
help(c)
a
names(a)
names(a) <-"test"
a
# creating a matrix from vectors
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
print(c)
a
b
a
factor(a)
b
d
rm(d)
mynames
factor(mynames)
c
factor(c)
factor(c[a])
a[a]
c
c[a]
c
c["a"]
c[a]
a
c$a
c
c[a,]
c["a",]
a
c[b]
c["b"]
c["b", ]
a <- matrix(1:10, nrow=2, ncol=5, byrow = FALSE)
print(a)
a[,3]
a[1, 2:3]
a[, 2:4]
a[, c(2, 5)]
# naming matrix dimensions. the name must be a list
mynames <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
dimnames(a) <- mynames
a
a["row1"]
a["row1", ]
# access matrix by names
a["row1", ] # first row of a
a[, c("col1", "col3")]
a
factor(a[,"col3"])
factor(a)
a[3,] = c(2:6)
a[3,] <- c(2:6)
dim(a)
dim(a)<- c(3, 5)
a[1, ] # this will give a vector, not matrix
a[1, , drop=FALSE] # this will give you a matrix of 1 by 5
a
# add row or column by cbind and rbind
c
# add row or column by cbind and rbind
c <- cbind(c, c["row2", ])
print(c)
# add row or column by cbind and rbind
c <- cbind(c, c["b", ])
# add row or column by cbind and rbind
c <- rbind(c, c["b", ])
print(c)
help(cbind)
c
rownames(c)
class(rownames(c))
rownames(c)[2]
rownames(c)[3] <-"c"
c
# creating a matrix from vectors
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
print(c)
rownames(c)[3] <-"c"
c <- rbind(a, b)
print(c)
rownames(c)[3] <-"c"
rownames(c)
c
# creating a matrix from vectors
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
c <- rbind(c, b)
rownames(c)[3] <-"c"
print(c)
a
c
factor(c)
levels(c)
help(levels)
levels(factor(c))
c <- rbind(a, b)
print(c)
c <- rbind(c, c["b", ])
print(c)
rownames(c)[3] <-"c"
print(c)
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
c <- rbind(c, c["b", ])
print(c)
rownames(c)[3] <-"c"
print(c)
c
k <- c[c("a", "b")]
k
c
k <- c[c("a", "b"),]
k
t(k)
k[,"b"]
k
k["b", ]
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
c <- rbind(c, c["b", ])
print(c)
rownames(c)[3] <-"c"
print(c)
k <- c[c("a", "c"), ]
k
k <- c[c("a"), ]
k
length(k) <- 12
k
dim(k) <- c(4, 3)
print(k)
x <-c(1, 2, 3, 4, 5, 3, NA)
y <-x[!is.na(x)]
y
y
factor(y)
z <- factor(y)
z
y
z
table(z)
z <-factor(z, levels=c("one", "two", "three", "four", "five"))
z
z
z <-factor(y, levels=c("one", "two", "three", "four", "five"))
z
y
z <-factor(y, lables=c("one", "two", "three", "four", "five"))
z <-factor(y, labels=c("one", "two", "three", "four", "five"))
z
z <-factor(y, levels=c(1, 2, 3), labels=c("one", "two", "three", "four", "five"))
z <-factor(y, levels=c(1, 2, 3), labels=c("one", "two", "three", "four", "five"))
y
z <-factor(y, levels=c(1:5), labels=c("one", "two", "three", "four", "five"))
z
z <-ordered(y, levels=c(1:5), labels=c("one", "two", "three", "four", "five"))
z
y
z <-factor(y, levels=c(1:10), labels=c("one", "two", "three", "four", "five"))
z <-factor(y, levels=c(1:6), labels=c("one", "two", "three", "four", "five", "six"))
z
a <- matrix(1:10, nrow=2, ncol=5, byrow = FALSE)
print(a)
# naming matrix dimensions. the name must be a list
mynames <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
dimnames(a) <- mynames
print(a)
# access matrix by names
a["row1", ] # first row of a
a[, c("col1", "col3")]
print(a)
x <- factor(c(1:5))
print(x)
x <- factor(rep(c(1:5), times=2)
x <- factor(rep(c(1:5), times=2))
x <- factor(rep(c(1:5), times=2))
print(x)
x <-t(x)
print(x)
x <- factor(rep(c(1:5), times=2))
print(x)
View(x)
x <- factor(sample(c(1:10), 20))
sample(1:10, 10)
x <- factor(sample(1:10, 20))
x <- factor(sample(1:10, 20), replace=TRUE)
x <- factor(sample(1:10, 20), replace=TRUE)
x <- factor(sample(1:10, 20, replace=TRUE))
print(x)
x <- factor(sample(1:6, 20, replace=TRUE), levels = c(1:6), labels =
"one", "two", "three", "four", "five", "six")
x <- factor(sample(1:6, 20, replace=TRUE), levels = c(1:6), labels =
"one", "two", "three", "four", "five", "six")
sample(1:6, 20, replace=TRUE)
x <- factor(sample(1:6, 20, replace=TRUE), levels = c(1:6), labels =
"one", "two", "three", "four", "five", "six")
x <- factor(sample(1:6, 20, replace=TRUE), levels = c(1:6), labels =
c("one", "two", "three", "four", "five", "six"))
print(x)
View(x)
x <- factor(c("yes", "no", "yes", "yes", "no"))
print(x)
table(x)
# factors
# sample a data vector of 20 numbers between 1 and 6, and replace the values with
# the labels using factor()
x <- factor(sample(1:6, 20, replace=TRUE), levels = c(1:6), labels =
c("one", "two", "three", "four", "five", "six"))
table(x)
# factors
# sample a data vector of 20 numbers between 1 and 6, and replace the values with
# the labels using factor()
x <- factor(sample(1:6, 20, replace=TRUE), levels = c(1:6), labels =
c("one", "two", "three", "four", "five", "six"))
table(x) # gives a frequency table based on the factor levels
x
unclss(x)
unclass(x)
help(unclass)
a <-10
class(a)
class(a) <- c("a", "b")
a
# factors
# sample a data vector of 20 numbers between 1 and 6, and replace the values with
# the labels using factor()
x <- factor(sample(1:6, 20, replace=TRUE), levels = c(1:6), labels =
c("one", "two", "three", "four", "five", "six"))
table(x) # gives a frequency table based on the factor levels
x
unclass(x)
y <-unclass(x)
y
y <-factor(y)
y
attr(y)
attributes(y)
attributes(x)
y
# factors
# sample a data vector of 20 numbers between 1 and 6, and replace the values with
# the labels using factor()
y <- factor(sample(1:6, 20, replace=TRUE), levels = c(1:6), labels =
c("one", "two", "three", "four", "five", "six"))
y
unclass(y)
help(pmax)
a <- c(1, 2, 1, 2, 4)
a2 <- c(1:20)
a3 <- seq(from=1, to=20, by=2)
b <- c(2, 4, 3, 21, 4)
a33 <- rbind(a, b)
a34 <- cbind(a, b)
max(a)
pmax(a, b)
a
b
pmax(a, b)
a
b
a <-c(sample(1:10, 5))
a
b
max(a)
max(b)
pmax(a,b)
help(range)
a
pmax.int(a, b)
help(pmax.int)
a<-paste(c("X", "Y"), 1:10, sep="")
print(a)
x <- factor(sample(1:6, 20, replace=TRUE), levels = c(6:1), labels =
c("one", "two", "three", "four", "five", "six"))
print(x)
unclass(x)
x <- factor(c("one", "two", "three", "four", "five", "six"))
x
x <- factor(c("one", "two", "three", "four", "five", "six"), levels =
c("one", "two", "three", "four", "five", "six"))
print(x) # note that factor levels are alphabetially sorted
x <- factor(c("two", "two", "three", "four", "five", "six"), levels =
c("one", "two", "three", "four", "five", "six"))
print(x) # note that factor levels are alphabetially sorted
x <- factor(sample(2:6, 20, replace=TRUE), levels = c(1:6), labels =
c("one", "two", "three", "four", "five", "six"))
print(x)
table(x) # gives a frequency table based on the factor levels
unclass(x) # will give you original data (1, 2, 3, 4, 2, etc.)
x <- factor(sample(2:6, 20, replace=TRUE), levels = c(6:1), labels =
c("one", "two", "three", "four", "five", "six"))
x
unclass(x)
x <- factor(c("one", "one", "two", "four"), levels =
c("one", "two", "three", "four", "five", "six"),
labels =c("one", "two", "three", "four", "five", "six"))
x
x <- factor(c("one", "one", "two", "four"), levels =
c("one", "two", "three", "four", "five", "six"),
labels =c("six", "two", "three", "four", "five", "one"))
x
unclass(x)
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
c <- rbind(c, c["b", ])
print(c)
rownames(c)[3] <-"c"
print(c)
c
is.na(c)
is.na(c)<- 3
is.na(c)
is.na(c) <-3
is.na(c)
c
is.nan(c)<-3
is.nan(c) <-3
is.nan(c)
is.na(c)
!is.na(c) <-3
help("is.na")
!is.na(c) <-3
is.na(c) <-3:4
c
is.na(c) <-c(3, 5)
c
c[is.na(c)] <-10
c
a <- c("1", 3)
a
a <- c(1, 3L, 3.1)
a
a <- c(1, 3L, 3)
a
a <- c(1, TRUE, 3)
a
a<-list("a", 23.2, 3L, "home", TRUE)
a
a[1]
a[[1]]
a
a[2]
a[2]*3
a[[3]]*3
a
colnames(a)<-c("one", "two", "three", "four", "five")
a
view(a)
View(a)
rownames(a)<-c("one", "two", "three", "four", "five")
dim(a)
mynames <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
mynames
dim(nymanes)
dim(mynames)
a
a <- matrix(1:10, nrow=2, ncol=5, byrow = FALSE)
a
dim(a)
dim(a)
dimnames(a)
View(mynames)
dimnames(mynames)
dimnames(a)<-mynames
a
as.matrix
help as.matrixa
a
class(a)
b<-as.data.frame(a)
b
class(b)
c<- as.matrix(b)
c
row.names(c)
row.names(b)
x<-c("x", "y", "z")
x[(x=="z")]<-"k"
x[c(x=="k")]<-"z"
x
x[x=="z"]<-"t"
x
x
x[1]
x[2]
# in the following example, the level "one" is labeled as "six"...
x <- factor(c("one", "one", "two", "four"), levels =
c("one", "two", "three", "four", "five", "six"),
labels =c("six", "two", "three", "four", "five", "one"))
x
x[1]
x[2]
x[3]
list(1)
c(list(1), "a")
# c() coercion
# if c() includes text, vector, list, the list class is the final outcome
x <- c(list(2, 3), 3, "6")
print(x)
# c() coercion
# if c() includes text, vector, list, the list class is the final outcome
x <- c(list("text", 3), 3, "6")
print(x)
x[1]
x[[1]]
class(lastvalue)
class(last.value)
Last.value
.Last.value
class(.Last.value)
x[1]
class(.Last.value)
# c() coercion
# if c() includes text, vector, list, the list class is the final outcome
x <- c(list("text", 3), 3, "6")
str(x)
y <- list("text", 3, 3, "6")
y
class(y)
class(x)
x
y
str(y)
str(x)
z <- list(list("text", 3), 3, "6")
z
x[1]
z[1]
z[[1]]
str(.Last.value)
z[[[1]]]
z
str(z)
z[[1]][[1]]
z[[1]]$1
z$1
str(y)
z[[1]][[1]]
class(.Last.value)
z[[1]][1]
z[[1]][2]
class(.Last.value)
