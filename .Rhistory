{
postOP_IV_other = postOP_IV_other + 1
}
}
else if (tt == 10) # preOP_PO
{
if ((tempvalue1 >=1) | (tempvalue1 <=2))
{
preOP_PO_actual = preOP_PO_actual + 1
}
else if (tempvalue1 == 3)
{
preOP_PO_NPO = preOP_PO_NPO + 1
}
else if (tempvalue1 == 4)
{
preOP_PO_refuse = preOP_PO_refuse + 1
}
else if (tempvalue1 == 5)
{
preOP_PO_other = preOP_PO_other + 1
}
}
else if ((tt >= 11) &(tt <= 14)) # postOP_PO
{
if ((tempvalue1>=1) | (tempvalue1 <=2))
{
postOP_PO_actual = postOP_PO_actual + 1
}
else if (tempvalue1 == 3)
{
postOP_PO_NPO = postOP_PO_NPO + 1
}
else if (tempvalue1 == 4)
{
postOP_PO_refuse = postOP_PO_refuse + 1
}
else if (tempvalue1 == 5)
{
postOP_PO_other = postOP_PO_other + 1
}
}
}
}
}
}
}
tempMatrix[3, i] <- preOP_IV_actual
tempMatrix[4, i] <- preOP_IV_refuse
tempMatrix[5, i] <- preOP_IV_other
tempMatrix[2, i] <- sum(tempMatrix[3:5, i])
tempMatrix2[2, i] <- postOP_IV_actual
tempMatrix2[3, i] <- postOP_IV_refuse
tempMatrix2[4, i] <- postOP_IV_other
tempMatrix2[1, i] <- sum(tempMatrix2[2:4, i])
tempMatrix3[2, i] <- preOP_PO_actual
tempMatrix3[3, i] <- preOP_PO_NPO
tempMatrix3[4, i] <- preOP_PO_refuse
tempMatrix3[5, i] <- preOP_PO_other
tempMatrix3[1, i] <- sum(tempMatrix3[2:5, i])
tempMatrix4[2, i] <- postOP_PO_actual
tempMatrix4[3, i] <- postOP_PO_NPO
tempMatrix4[4, i] <- postOP_PO_refuse
tempMatrix4[5, i] <- postOP_PO_other
tempMatrix4[1, i] <- sum(tempMatrix4[2:5, i])
}
# matrices for proportion values
# Pre OP IV matrix
tempMatrix[2:5,1] <- t(rowSums(tempMatrix[2:5, ], na.rm = TRUE))
pMatrix <- tempMatrix[3:5, ]
#pMargin <- margin.table(tempMatrix[3:5, ],2)
pMargin <- tempMatrix[2, ]
pMargin <- rbind(pMargin, pMargin, pMargin)
pMatrix[] <- (tempMatrix[3:5,] /pMargin)
pMatrix[is.nan(pMatrix)] <- 0 # replace NaN with 0
pMatrix[] <- percent(pMatrix)
# Post OP IV matrix
tempMatrix2[1:4,1] <- t(rowSums(tempMatrix2[1:4, ], na.rm = TRUE))
pMatrix2 <- tempMatrix2[2:4, ]
pMargin2 <- tempMatrix2[1, ]
pMargin2 <- rbind(pMargin2, pMargin2, pMargin2)
pMatrix2[] <- (tempMatrix2[2:4,] /pMargin2)
pMatrix2[is.nan(pMatrix2)] <- 0 # replace NaN with 0
pMatrix2[] <- percent(pMatrix2)
# Pre OP PO matrix
tempMatrix3[1:5,1] <- t(rowSums(tempMatrix3[1:5, ], na.rm = TRUE))
pMatrix3 <- tempMatrix3[2:5, ]
pMargin3 <- tempMatrix3[1, ]
pMargin3 <- rbind(pMargin3, pMargin3, pMargin3, pMargin3)
pMatrix3[] <- (tempMatrix3[2:5,] /pMargin3)
pMatrix3[is.nan(pMatrix3)] <- 0 # replace NaN with 0
pMatrix3[] <- percent(pMatrix3)
# Post OP PO matrix
tempMatrix4[1:5,1] <- t(rowSums(tempMatrix4[1:5, ], na.rm = TRUE))
pMatrix4 <- tempMatrix4[2:5, ]
pMargin4 <- tempMatrix4[1, ]
pMargin4 <- rbind(pMargin4, pMargin4, pMargin4, pMargin4)
pMatrix4[] <- (tempMatrix4[2:5,] /pMargin4)
pMatrix4[is.nan(pMatrix4)] <- 0 # replace NaN with 0
pMatrix4[] <- percent(pMatrix4)
# Merge all matrix table
Table2_matrix = rbind(tempMatrix, tempMatrix2, tempMatrix3, tempMatrix4)
Table2_pMatrix = rbind(pMatrix, pMatrix2, pMatrix3, pMatrix4)
# add the number of patients in each facility to the Matrix of Statistics
outputTable1_facility <- outputTable1_facility[c(15, 1, 2, 3, 4, 5,6, 7, 8, 9, 10, 11, 12, 13, 14 )]
tempPatients <- as.vector(outputTable1_facility)
Table2_matrix[1, ] <- tempPatients
# add names for column and rows
NameFacility <- names(outputTable1_facility)
colnames(Table2_matrix) <- c(NameFacility)
rownames(Table2_matrix) <- c("Number Enrolled", "Expected Pre-OP IV Doses",
"    No. of Pre-OP IV Doses Administered","    No. of Pre-OP IV Doses Not Administered-Refused", "    No. of Pre-OP IV Doses Not Administered_Other",
"Expected Post-OP IV Doses",
"    No. of Post-OP IV Doses Administered", "    No. of Post-OP IV Doses Not Administered-Refused", "    No. of Post-OP IV Doses Not Administered_Other",
"Expected Pre-OP PO Doses",
"    No. of Pre-OP PO Doses Administered", "    No. of Pre-OP PO Doses Not Administered-NPO", "    No. of Pre-OP IV Doses Not Administered_Refused","    No. of Pre-OP PO Doses Not Administered_Other",
"Expected Post-OP PO Doses",
"    No. of Post-OP PO Doses Administered", "    No. of Post-OP PO Doses Not Administered-NPO", "    No. of Post-OP IV Doses Not Administered_Refused","    No. of Post-OP PO Doses Not Administered_Other")
# change to character to merge with proportion Matrix
Table2_matrix[] <- as.character(Table2_matrix)
for (i in 1:15)
{
Table2_matrix[3, i] <- paste(c(Table2_matrix[3, i], " (", Table2_pMatrix[1, i], ")"), collapse="")
Table2_matrix[4, i] <- paste(c(Table2_matrix[4, i], " (", Table2_pMatrix[2, i], ")"), collapse="")
Table2_matrix[5, i] <- paste(c(Table2_matrix[5, i], " (", Table2_pMatrix[3, i], ")"), collapse="")
Table2_matrix[7, i] <- paste(c(Table2_matrix[7, i], " (", Table2_pMatrix[4, i], ")"), collapse="")
Table2_matrix[8, i] <- paste(c(Table2_matrix[8, i], " (", Table2_pMatrix[5, i], ")"), collapse="")
Table2_matrix[9, i] <- paste(c(Table2_matrix[9, i], " (", Table2_pMatrix[6, i], ")"), collapse="")
Table2_matrix[11, i] <- paste(c(Table2_matrix[11, i], " (", Table2_pMatrix[7, i], ")"), collapse="")
Table2_matrix[12, i] <- paste(c(Table2_matrix[12, i], " (", Table2_pMatrix[8, i], ")"), collapse="")
Table2_matrix[13, i] <- paste(c(Table2_matrix[13, i], " (", Table2_pMatrix[9, i], ")"), collapse="")
Table2_matrix[14, i] <- paste(c(Table2_matrix[14, i], " (", Table2_pMatrix[10, i], ")"), collapse="")
Table2_matrix[16, i] <- paste(c(Table2_matrix[16, i], " (", Table2_pMatrix[11, i], ")"), collapse="")
Table2_matrix[17, i] <- paste(c(Table2_matrix[17, i], " (", Table2_pMatrix[12, i], ")"), collapse="")
Table2_matrix[18, i] <- paste(c(Table2_matrix[18, i], " (", Table2_pMatrix[13, i], ")"), collapse="")
Table2_matrix[19, i] <- paste(c(Table2_matrix[19, i], " (", Table2_pMatrix[14, i], ")"), collapse="")
}
grid.table(Table2_matrix)
install.packages(c("dplyr", "xtable", "vioplot", "ggplot2", "hmisc", "foreign", "rcpp", "ProjectTemplate", "sf", "raster", "spData", "spDataLarge", "tmap", "leaflet", "mapview", "shiny", "devtools", "cluster", "DBI", "odbc", "RMySQL", "xlsx", "XLConnect", "haven", "tidyr", "stringr", "stringi", "car", "mgcv", "glmnet", "survival", "caret", "rmarkdown", "xtable", "sp", "maps", "ggmap", "maptools", "zoo", "xts", "lubridate", "XML", "testthat"))
utils:::menuInstallPkgs()
setRepositories()
getwd()
setwd("C:\Users\ksung\OneDrive\R")
setwd("C:\\Users\\ksung\\OneDrive\\R")
q()
install.packages(c("tidyverse", "ggplot2", "gganimate"))
ls()
myfunction <- function{}
a <-rnorm(100)
a
help(rnorm)
a<-rnorm(4)
a
a<-rnorm(1:3)
a
a<-rnorm(5:10)
a
a<-rnorm(5:10)
a <-10
rnorm(a)
cd R_practice
cd R_practice
ls
dir
dir()
setwd("R_practice")
ls
ls()
dir()
alpha <-c(1:10)
alpha <-alpha[2*(1:5)]
alpha<-c(1:10)
alpha
print(alpha)
beta <- alpha[5*(1:5), 6:10]
beta <- alpha[c(5*(1:5) 6:10)]
beta <- alpha[c(5*(1:5)]
beta <- alpha[(5*(1:5)]
beta <- alpha[5*(1:5)]
beta <- alpha[c(5*(1:5))]
beta
alpha
beta <- alpha[c(2*(1:5))]
beta
beta <- alpha[c(1:5, 6:8)]
beta
beta <- alpha[c(1:5)*2, 6:8)]
beta <- alpha[c((1:5)*2, 6:8))]
beta <- alpha[c((1:5)*2 6:8))]
beta <- alpha[c((1:3)*2, 9:8))]
beta <- alpha[(1:3)*2, 9:8]
beta <- alpha[c((1:3)*2, 9:8)]
beta
alpha<-c(2:10)*3
alpha
beta <- alpha[c((1:3)*2, 9:8)]
beta
beta <- alpha[c((1:3)*2, 7:8)]
beta
c((1:3)*2, 7:8)
alpha <-c(1:10)
beta <-alpha[2*(1:5)]
beta <-alpha[c(1:3, 7:9)]
length(beta)<-3
a <-c(TRUE, "a")
a
a
b <-as.numeric(a)
a
b
b <- as.logical(a)
b
a <-c(1, 2, 0, 1)
a
as.logical(a)
a <-c(1, 2, 0, "1")
as.logical(a)
a
b <-as.logical(as.numeric(a))
b
a<-list("a", 23.2, 3L, "home", TRUE)
a
a[1]
a[1,2]
a[3]
a[[3]]
a
class(a[1])
class(a[[1]])
list[3]
a[3]
a
a[2]*2
a[[2]]*2
print(a)
print(a[2])
print(a[[2]]
)
print(
a
)
print(
+  a)
print(
a)
a <- matrix(nrow=2, ncol=5)
a
a <- matrix([1:10], nrow=2, ncol=5)
a <- matrix(1:10, nrow=2, ncol=5)
a
a[,3]
a[1, 2:3]
a[, 2:3]
a[, 2:4]
a[, (2, 5)]
a[, c(2, 5)]
dimnames(a)
rep("x", times-2)
rep("x", times=2)
seq("x", times=2)
rep(c(x[1], x[2], x[2], x[3]), times=2)
rep(c(x[1], x[2], x[2], x[3]), times=2)
x<-c("x", "y", "z")
x[rep(c(1, 2, 2, 3), times=2)]
rep(c(x[1], x[2], x[2], x[3]), times=2)
paste("row", rep(c(1:5), sep="")
)
paste("row", rep(c(1:5), sep=" ")
)
paste0("row", rep(c(1:5))
)
dimnames
dimnames(a)
a <- matrix(1:10, nrow=2, ncol=5)
a
dimnames(a)
dimnames(a) <- c("row1", "row2", paste0("col", rep(c(1:5))))
dimnames(a) <- list("row1", "row2", paste0("col", rep(c(1:5))))
a
paste0("col", rep(c(1:5)))
dim(a)
dimnames(a) <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
dimnames(a)
a
a <- 1:20
dim(a)
a <- matrix(1:10, nrow=2, ncol=5)
a[,3]
a[1, 2:3]
a[, 2:4]
a[, c(2, 5)]
dim(a)
class(.Last.value)
a <- 1:20
dim(a) <- c(4, 5) # change the vector of length 20 to a matrix of 4 by 5
a
a <- matrix(1:10, nrow=2, nrow=5, byrow = TRUE)
a[,3]
a[1, 2:3]
a[, 2:4]
a[, c(2, 5)]
a <- matrix(1:10, nrow=2, nrow=5, byrow = TRUE)
print(a)
a[,3]
a[1, 2:3]
a[, 2:4]
a[, c(2, 5)]
a
a
a <- matrix(1:10, nrow=2, nrow=5, byrow = TRUE)
print(a)
a[,3]
a[1, 2:3]
a[, 2:4]
a[, c(2, 5)]
a
help("matrix")
=5, byrow = TRUE)
a <- matrix(1:10, nrow=2, ncol=5, byrow = TRUE)
a <- matrix(1:10, nrow=2, ncol=5, byrow = TRUE)
print(a)
a <- matrix(1:10, nrow=2, ncol=5, byrow = FALSE)
a <- 1:20
dim(a) <- c(4, 5) # change the vector of length 20 to a matrix of 4 by 5
a <- 1:20
dim(a) <- c(4, 5) # change the vector of length 20 to a matrix of 4 by 5
print(a)
a <- 1:20
print(a)
dim(a) <- c(4, 5) # change the vector of length 20 to a matrix of 4 by 5
print(a)
# naming matrix dimensions. the name must be a list
mynames <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
mynames
dimnames(a) <- mynames
a <- matrix(1:10, nrow=2, ncol=5, byrow = FALSE)
print(a)
a[,3]
a[1, 2:3]
a[, 2:4]
a[, c(2, 5)]
mynames <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
dimnames(a) <- mynames
a
# using vector()
x <- vector(mode="numeric", length=10L)
c <- "single quote ' in between double quotes"
print(c)
d <- 'Double quotes " in between single quote'
a <-c(1, 2, 0, "1")
print(d)
# creating a matrix from vectors
a <-c(1:4)
b <-c(31:36)
c <-cbind(a, b)
# creating a matrix from vectors
a <-c(1:6)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
print(c)
help(c)
a
names(a)
names(a) <-"test"
a
# creating a matrix from vectors
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
print(c)
a
b
a
factor(a)
b
d
rm(d)
mynames
factor(mynames)
c
factor(c)
factor(c[a])
a[a]
c
c[a]
c
c["a"]
c[a]
a
c$a
c
c[a,]
c["a",]
a
c[b]
c["b"]
c["b", ]
a <- matrix(1:10, nrow=2, ncol=5, byrow = FALSE)
print(a)
a[,3]
a[1, 2:3]
a[, 2:4]
a[, c(2, 5)]
# naming matrix dimensions. the name must be a list
mynames <- list(c("row1", "row2"), paste0("col", rep(c(1:5))))
dimnames(a) <- mynames
a
a["row1"]
a["row1", ]
# access matrix by names
a["row1", ] # first row of a
a[, c("col1", "col3")]
a
factor(a[,"col3"])
factor(a)
a[3,] = c(2:6)
a[3,] <- c(2:6)
dim(a)
dim(a)<- c(3, 5)
a[1, ] # this will give a vector, not matrix
a[1, , drop=FALSE] # this will give you a matrix of 1 by 5
a
# add row or column by cbind and rbind
c
# add row or column by cbind and rbind
c <- cbind(c, c["row2", ])
print(c)
# add row or column by cbind and rbind
c <- cbind(c, c["b", ])
# add row or column by cbind and rbind
c <- rbind(c, c["b", ])
print(c)
help(cbind)
c
rownames(c)
class(rownames(c))
rownames(c)[2]
rownames(c)[3] <-"c"
c
# creating a matrix from vectors
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
print(c)
rownames(c)[3] <-"c"
c <- rbind(a, b)
print(c)
rownames(c)[3] <-"c"
rownames(c)
c
# creating a matrix from vectors
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
c <- rbind(c, b)
rownames(c)[3] <-"c"
print(c)
a
c
factor(c)
levels(c)
help(levels)
levels(factor(c))
c <- rbind(a, b)
print(c)
c <- rbind(c, c["b", ])
print(c)
rownames(c)[3] <-"c"
print(c)
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
c <- rbind(c, c["b", ])
print(c)
rownames(c)[3] <-"c"
print(c)
c
k <- c[c("a", "b")]
k
c
k <- c[c("a", "b"),]
k
t(k)
k[,"b"]
k
k["b", ]
a <-c(1:6)
b <-c(31:36)
c <-cbind(a, b)
print(c)
c <- rbind(a, b)
c <- rbind(c, c["b", ])
print(c)
rownames(c)[3] <-"c"
print(c)
k <- c[c("a", "c"), ]
k
k <- c[c("a"), ]
k
length(k) <- 12
k
dim(k) <- c(4, 3)
print(k)
